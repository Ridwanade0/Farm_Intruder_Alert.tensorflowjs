<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Camera Control</title>
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
    rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
    crossorigin="anonymous"
  />
</head>
<body class="container mt-5">
  <h1 class="mb-4">Camera Control</h1>
  <div class="mb-3">
    <button id="startButton" class="btn btn-primary me-2">Start Camera</button>
    <button id="stopButton" class="btn btn-danger" disabled>Stop Camera</button>
  </div>
  <div>
    <video id="video" autoplay></video>
  </div>
  <div id="messages" class="mt-3"></div>

  <script>
    const startButton = document.getElementById('startButton');
    const stopButton = document.getElementById('stopButton');
    const video = document.getElementById('video');
    const messages = document.getElementById('messages');
    let stream;
    let socket;
    let canvas, context;

    startButton.addEventListener('click', async () => {
      try {
        stream = await navigator.mediaDevices.getUserMedia({ video: true });
        video.srcObject = stream;
        startButton.disabled = true;
        stopButton.disabled = false;

        // Open WebSocket connection
        socket = new WebSocket('ws://localhost:3000');

        socket.onopen = () => {
          console.log('WebSocket connection opened');
          canvas = document.createElement('canvas');
          context = canvas.getContext('2d');
          canvas.width = video.videoWidth;
          canvas.height = video.videoHeight;

          const sendFrame = () => {
            if (!stream.active) return; // Stop sending frames when stream is inactive
            context.drawImage(video, 0, 0, canvas.width, canvas.height);
            canvas.toBlob(blob => {
              if (socket.readyState === WebSocket.OPEN) {
                const reader = new FileReader();
                reader.onload = () => {
                  const arrayBuffer = reader.result;
                  socket.send(arrayBuffer);
                };
                reader.readAsArrayBuffer(blob);
              }
            }, 'image/jpeg');
            requestAnimationFrame(sendFrame);
          };
          sendFrame();
        };

        socket.onmessage = (event) => {
          const message = document.createElement('div');
          message.textContent = `Received: ${event.data}`;
          messages.appendChild(message);
          console.log(event.data)
        };

        socket.onclose = () => {
          console.log('WebSocket connection closed');
        };

        socket.onerror = (error) => {
          console.error('WebSocket error:', error);
        };
      } catch (err) {
        console.error('Error accessing camera:', err);
      }
    });

    stopButton.addEventListener('click', () => {
      if (stream) {
        const tracks = stream.getTracks();
        tracks.forEach(track => track.stop());
        video.srcObject = null;
        startButton.disabled = false;
        stopButton.disabled = true;
      }
      if (socket) {
        socket.close();
      }
    });
  </script>
</body>
</html>
